version: '3'

services:

  kong-database:
    image: postgres:9.6
    container_name: kong-database
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 5

  migrations:
    depends_on:
      - kong-database
    image: kong
    container_name: kong-migrations
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: kong migrations bootstrap -v

  kong:
    depends_on:
      - kong-database
    image: kong:2.6.0
    ports:
      - 8000:8000
      - 443:8443 
      - 8001:8001
    container_name: kong
    restart: always
    environment:
      - TZ=America/Buenos_Aires
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 ssl http2
      - KONG_NGINX_HTTP_RESOLVER=8.8.8.8
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_TRUSTED_IPS=0.0.0.0/0,::/0
      - KONG_REAL_IP_RECURSIVE=on
    healthcheck:
      test: ["CMD", "wget", "-O-", "http://kong:8001/status"]
      interval: 30s
      timeout: 20s
      retries: 5

  mongo:
    image: mongo:4.2.2-bionic
    container_name: mongo
    ports: 
      - 27017:27017
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/konga --quiet
      interval: 30s
      timeout: 5s
      retries: 5
    volumes:
      - konga_data:/data/db

  konga:
    image: pantsel/konga:latest
    ports:
      - 1337:1337
    environment:
      DB_ADAPTER: mongo
      DB_DATABASE: konga
      DB_HOST: mongo
      DB_PORT: 27017
      KONGA_SEED_USER_DATA_SOURCE_FILE: /kus.js
      NODE_ENV: production
    volumes:
      - ./kus.js:/kus.js:ro
    restart: on-failure

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash-oss:7.10.2
    command: bash -c 'bin/logstash -e "input { http { } } output { stdout { codec => rubydebug } elasticsearch { hosts => [\"http://elasticsearch:9200\"] }}" && bin/logstash-plugin install logstash-input-http'
    links:
      - elasticsearch
    ports:
      - 5044:8080

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es_data:/usr/share/elasticsearch/data
  
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana-oss:7.10.2
    environment: 
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports: 
      - 5601:5601

volumes:
  konga_data:
  pg_data:
  es_data:

